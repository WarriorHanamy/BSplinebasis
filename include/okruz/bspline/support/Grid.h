#ifndef OKRUZ_BSPLINE_SUPPORT_GRID_H
#define OKRUZ_BSPLINE_SUPPORT_GRID_H
#include <assert.h>
#include <memory>
#include <okruz/bspline/internal/misc.h>
#include <vector>

/*
 * ########################################################################
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * ########################################################################
 */

namespace okruz::bspline::support {
/*!
 * Represents a global grid.
 *
 * @tparam T The datatype of the grid elements.
 */
template <typename T> class Grid {
private:
  size_t _size; /*! Number of elements of the global grid. */
  std::shared_ptr<const T[]> _data; /*! Shared pointer to the data. */

  /*!
   * Generates the shared pointer to an array from two iterators.
   *
   * @param begin The iterator referencing the first element to be copied into
   * the grid.
   * @param end The iterator referencing the element behind the last element to
   * be copied into the grid.
   * @returns A shared pointer to a dynamic array, holding the grid elements.
   */
  template <typename Iter>
  std::shared_ptr<const T[]> generateData(Iter begin, Iter end) {
    T *dat = new T[_size];
    for (size_t i = 0; i < _size; i++) {
      dat[i] = *(begin + i);
    }
    return std::shared_ptr<const T[]>(dat);
  };

  bool isSteadilyIncreasing() const {
    for (size_t i = 1; i < _size; i++) {
      if (_data[i - 1] >= _data[i]) {
        return false;
      }
    }
    return true;
  }

public:
  /*!
   * Default constructor, constructing an empty grid.
   */
  Grid() : _size(0){};

  /*!
   * Constructs a grid from two iterators. The first element of the grid will be
   * the element referenced by begin. The last element of the grid will be the
   * one before the element pointed to by end;
   *
   * @param begin The iterator referencing the first element to be copied into
   * the grid.
   * @param end The iterator referencing the element behind the last element to
   * be copied into the grid.
   * @tparam Iter The type of the two iterators.
   */
  template <typename Iter>
  Grid(Iter begin, Iter end)
      : _size(std::distance(begin, end)), _data(generateData(begin, end)) {
    assert(isSteadilyIncreasing());
  };

  /*!
   * Constructs a grid from a std::vector. The elements of the vector are
   * copied, not moved.
   *
   * @param v The input vector.
   */
  Grid(const std::vector<T> &v) : Grid(v.begin(), v.end()){};

  /*!
   * Constructs a grid by setting its members.
   *
   * @param size The size of the grid.
   * @param data A shared pointer to the grid elements.
   */
  Grid(size_t size, std::shared_ptr<const T[]> data)
      : _size(size), _data(std::move(data)) {
    assert(isSteadilyIncreasing());
  };

  // Default constructors and operators generated by the compiler.
  Grid(const Grid &g) = default;
  Grid(Grid &&g) = default;
  virtual ~Grid() = default;
  Grid &operator=(const Grid &g) = default;
  Grid &operator=(Grid &&g) = default;

  /*!
   * Comparison operator.
   *
   * @param g The grid to compare this grid with.
   * @returns Returns true if the grids represent the same logical grid.
   */
  bool operator==(const Grid &g) const {
    if (_data == g._data && _size == g._size)
      [[likely]] return true;
    else if (_size != g._size)
      return false;
    for (size_t i = 0; i < _size; i++)
      if (_data[i] != g._data[i])
        return false;
    return true;
  }

  /*!
   * Returns the number of elements of the grid.
   */
  size_t size() const { return _size; };

  /*!
   * Returns a shared pointer to the elements of this grid.
   */
  std::shared_ptr<const T[]> getData() const { return _data; };

  /*!
   * Checks whether this spline holds no elements.
   *
   * @returns Returns true if this grid holds no element.
   */
  bool empty() const { return _size == 0; };

  /*!
   * Returns a reference to the ith element of the grid. Performs no bounds
   * checks.
   *
   * @param i The index of the element to be returned.
   * @returns A reference to the ith element.
   */
  const T &operator[](size_t i) const { return _data[i]; };

  /*!
   * Returns a reference to the ith element of the grid. Checks the bounds.
   *
   * @param i The index of the element to be returned.
   * @returns A reference to the ith element.
   */
  const T &at(size_t i) const {
    assert(i < _size);
    return _data[i];
  };

  /*!
   * Returns a reference to the first element of the grid.
   *
   * @returns A reference to the first element.
   */
  const T &front() const {
    assert(_data && _size > 0);
    return _data[0];
  };

  /*!
   * Returns a reference to the last element of the grid.
   *
   * @returns A reference to the last element.
   */
  const T &back() const {
    assert(_data && _size > 0);
    return _data[_size - 1];
  };
};
};     // namespace okruz::bspline::support
#endif // OKRUZ_BSPLINE_SUPPORT_GRID_H
