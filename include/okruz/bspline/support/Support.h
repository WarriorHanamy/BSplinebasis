#ifndef OKRUZ_BSPLINE_SUPPORT_SUPPORT_H
#define OKRUZ_BSPLINE_SUPPORT_SUPPORT_H

#include "Grid.h"
#include <optional>

/*
 * ########################################################################
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * ########################################################################
 */

namespace okruz::bspline::support {

/*!
 * This enum allows to signal to some constructors whether
 * an empty support should be constructed or one representing the
 * whole grid.
 */
enum class Construction { EMPTY, WHOLE_GRID };

/*!
 * Represents the support of a spline as a number of gridpoints.
 * It is hence essentially a view onto the global grid. The pointer to the
 * global grid allows for a speedy comparison whether splines are defined on the
 * same global grid and methods that assume they are can be used.
 *
 * @tparam T Datatype of the grid and spline.
 */
template <typename T> class Support {
public:
  /*!
   * Represents an interval relative to the global grid represented by _grid.
   */
  using AbsoluteIndex = size_t;

  /*!
   * Represents an interval relative to the intervals contained in this support.
   */
  using RelativeIndex = size_t;

  /*!
   * Constructs a support relative to the global grid grid.
   *
   * @param grid The global grid.
   * @param startIndex The index of the first grid point which is part of the
   * support.
   * @param endIndex The index of the element behind the last grid point which
   * is part of the support.
   */
  Support(Grid<T> grid, AbsoluteIndex startIndex, AbsoluteIndex endIndex)
      : _grid(std::move(grid)), _startIndex(startIndex), _endIndex(endIndex) {
    assert(_endIndex >= _startIndex && _endIndex <= _grid.size());
  };

  /*!
   * Constructs an empty support relative to the global grid grid.
   *
   * @param grid The global grid.
   * @param con The construction. If this parameter is not provided, an empty
   * support will be constructed, if it is set to Construction::WHOLE_GRID a
   * support representing the extend of the whole grid will be constructed.
   */
  Support(Grid<T> grid, Construction constr = Construction::EMPTY)
      : _grid(std::move(grid)), _startIndex(0),
        _endIndex((constr == Construction::EMPTY) ? 0 : _grid.size()){};

  // Default constructors and operators generated by the compiler.
  Support(const Support &s) = default;
  Support(Support &&s) = default;
  virtual ~Support() = default;
  Support &operator=(const Support &s) = default;
  Support &operator=(Support &&s) = default;

  /*!
   * Returns the number of grid points contained in the support.
   */
  size_t size() const { return _endIndex - _startIndex; };

  /*!
   * Checks whether the number of grid points contained in the support is zero.
   */
  bool empty() const { return (_startIndex == _endIndex); };

  /*!
   * Checks whether the support contains any intervals. Returns true if the
   * support is empty or point-like. The number of intervals is the number of
   * grid points minus one (size() - 1).
   */
  bool containsIntervals() const { return (size() > 1); };

  /*!
   * Returns the index relative to the intervals of this support from an index
   * relative to the global grid. If the index refers to an interval outside
   * this support, std::nullopt is returned.
   *
   * @param index The AbsoluteIndex referring to an interval on the global grid.
   */
  std::optional<RelativeIndex> relativeFromAbsolute(AbsoluteIndex index) const {
    if (index >= _startIndex && index + 1 < _endIndex)
      return index - _startIndex;
    else
      return std::nullopt;
  };

  /*!
   * Returns the index relative to the intervals of this support from an index
   * relative to the global grid. If the index refers to an interval outside
   * this support, std::nullopt is returned.
   *
   * @param index The AbsoluteIndex referring to an interval on the global grid.
   */
  AbsoluteIndex absoluteFromRelative(RelativeIndex index) const {
    assert(index < size());
    return index + _startIndex;
  };

  /*!
   * Returns the number of intervals represented by this support.
   */
  size_t numberOfIntervals() const {
    size_t si = size();
    if (si == 0)
      return 0;
    else
      return si - 1;
  };

  /*!
   * Returns the global grid.
   */
  Grid<T> getGrid() const { return _grid; };

  /*!
   * Returns the _startIndex.
   */
  AbsoluteIndex getStartIndex() const { return _startIndex; };

  /*!
   * Returns the _endIndex.
   */
  AbsoluteIndex getEndIndex() const { return _endIndex; }

  /*!
   * Allows access to the grid points contained in the support. Performs no
   * bounds checks.
   *
   * @param index Index of the element.
   */
  const T &operator[](RelativeIndex index) const {
    return _grid[_startIndex + index];
  };

  /*!
   * Allows access to the grid points contained in the support. Checks bounds
   * via an assert.
   *
   * @param index Index of the element.
   */
  const T &at(RelativeIndex index) const {
    assert(_startIndex + index < _endIndex);
    return _grid.at(_startIndex + index);
  };

  /*!
   * Returns a reference to the first grid point that is part of the support.
   */
  const T &front() const {
    assert(!empty());
    return _grid[_startIndex];
  };

  /*!
   * Returns a reference to the last grid point that is part of the support.
   */
  const T &back() const {
    assert(!empty());
    return _grid[_endIndex - 1];
  };

  /*!
   * Checks whether the global grids, the two supports are defined on, are
   * logically equivalent.
   *
   * @param s Support to check against.
   */
  bool hasSameGrid(const Support &s) const { return _grid == s._grid; };

  /*!
   * Compares two supports for equality. For two supports two be equal, they
   * have to be defined on the same grid, must represent the same subset of the
   * number line.
   *
   * @param s Support to compare against.
   */
  bool operator==(const Support &s) const {
    return hasSameGrid(s) &&
           ((_startIndex == s._startIndex && _endIndex == s._endIndex) ||
            (empty() && s.empty()));
  };

  /*!
   * Calculates the union of this support with the support s. This is not
   * strictly the set-theoretical union (if the two supports do not overlap),
   * but a support representing one contiguous bit of the number line containing
   * both supports.
   *
   * @param s The Support to calculate the union with.
   */
  Support calcUnion(const Support &s) const {
    assert(hasSameGrid(s));
    const bool thisEmpty = empty();
    const bool sEmpty = s.empty();
    if (thisEmpty && sEmpty)
      return Support(_grid); // Both Supports are empty, return empty Support
    else if (thisEmpty && !sEmpty)
      return s;
    else if (!thisEmpty && sEmpty)
      return *this;
    size_t newStartIndex = std::min(_startIndex, s._startIndex);
    size_t newEndIndex = std::max(_endIndex, s._endIndex);
    return Support(_grid, newStartIndex, newEndIndex);
  };

  /*!
   * Calculates the intersection of the two Supports.
   *
   * @param s The Support to calculate the intersection with.
   */
  Support calcIntersection(const Support &s) const {
    assert(hasSameGrid(s));
    size_t newStartIndex = std::max(_startIndex, s._startIndex);
    size_t newEndIndex = std::min(_endIndex, s._endIndex);
    if (newStartIndex >= newEndIndex)
      return Support(_grid); // no overlap, return empty Support
    else
      return Support(_grid, newStartIndex, newEndIndex);
  };

private:
  Grid<T> _grid;             /*! Represents the global grid. */
  AbsoluteIndex _startIndex; /*! Represents the begin of the Support. */
  AbsoluteIndex _endIndex; /*! Represents the end of the Support. Points to the
                       element behind the last element of the Support. */
};                         // end class Support
};                         // namespace okruz::bspline::support
#endif                     // OKRUZ_BSPLINE_SUPPORT_SUPPORT_H
